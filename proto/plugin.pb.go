// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.12
// source: proto/plugin.proto

package proto

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsSucc int32

const (
	IsSucc_success IsSucc = 0
	IsSucc_failed  IsSucc = 1
)

// Enum value maps for IsSucc.
var (
	IsSucc_name = map[int32]string{
		0: "success",
		1: "failed",
	}
	IsSucc_value = map[string]int32{
		"success": 0,
		"failed":  1,
	}
)

func (x IsSucc) Enum() *IsSucc {
	p := new(IsSucc)
	*p = x
	return p
}

type PluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image      []byte            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//Quality ranges from 1 to 100 inclusive, higher is better.
	Quality int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *PluginRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PluginRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *PluginRequest) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type PluginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Image  []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PluginReply) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *PluginReply) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

// go:plugin type=plugin version=1
type Actuator interface {
	Modify(context.Context, *PluginRequest) (*PluginReply, error)
}
